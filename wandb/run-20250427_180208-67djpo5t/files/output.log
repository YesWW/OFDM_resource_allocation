Traceback (most recent call last):
  File "C:\Users\daopr\Desktop\OFDM\OFDM_resource_allocation\trainer.py", line 381, in <module>
    tn.train(use_wandb=True, save_model=True)
  File "C:\Users\daopr\Desktop\OFDM\OFDM_resource_allocation\trainer.py", line 227, in train
    buf = self.roll_out(g, networks)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\daopr\Desktop\OFDM\OFDM_resource_allocation\trainer.py", line 143, in roll_out
    action, act_log_prob, _, value, _, _ = self._ac(power_alloc=power_alloc, beam_alloc=beam_alloc,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\daopr\anaconda3\envs\hanwha\Lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\daopr\anaconda3\envs\hanwha\Lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\daopr\Desktop\OFDM\OFDM_resource_allocation\model.py", line 110, in forward
    entropy_ = torch.stack(entropy_list, dim=0)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: stack expects a non-empty TensorList